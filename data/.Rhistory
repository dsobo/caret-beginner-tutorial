##Impute missing values for data where NA != None value
imp.df <- mice(df,meth='cart',m=1)
##Check numerical imputed data
#Compare lot frontage to LotArea
xyplot(imp.df, LotFrontage ~ LotArea)
#Compare distribution of imputed data vs actual
densityplot(imp.df, ~LotFrontage)
densityplot(imp.df, ~MasVnrArea)
?densityplot
##Check factor imputed data
imp.vars <- aggr(df, plot = FALSE)
imp.vars <- imp.vars$missings %>% filter(Count > 4)
actual <- data.frame(na.omit(df[,imp.vars[2,1]]))
names(actual) <- imp.vars[2,1]
actual <- actual %>% group_by(MasVnrType) %>% summarise(Actual = n()/nrow(df))
str(imp.df)
imputed <- data.frame(imp.df$imp[imp.vars[2,1]])
names(imputed) <- imp.vars[2,1]
imputed <- imputed %>% group_by(MasVnrType) %>% summarise(Imputed = n()/nrow(imputed))
to_plot <- actual %>% inner_join(imputed)
melted<- melt(to_plot, id=imp.vars[2,1])
ggplot(melted,aes(x=MasVnrType,y=value,fill=variable)) +
geom_bar(stat="identity", position="dodge") +
ylab("Proportion")
# Add imputed data to the dataset
df <- complete(imp.df)
save.image("imputed.RData")
num.var <- map_lgl(df, function(x){class(x) != "factor"})
num.names <- names(df)[num.var]
#Pre tranformation version of df to compare
df.pretran <- df
map(df.pretran[num.names], skewness)
#Perform log transformation on all variables with skewness > 1
for(x in num.names){
if(skewness(df[[x]]) > 1){
df[[x]] <- log(df[[x]] + 1)
}
else{}
}
map(df[num.names], skewness)
#LotArea was highly skewed. Lets compare the dist before and after the transformation
ggplot(df.pretran, aes(x = LotArea,)) +
geom_density(size = 1) +
ggtitle("Distribution of LotArea")
ggplot(df, aes(x = LotArea,)) +
geom_density(size = 1) +
ggtitle("Distribution of log(LotArea)")
##Evaluate the distribution of sales data
salesprice <- train$SalePrice
ggplot(data.frame(salesprice), aes(x = salesprice)) +
geom_density(size = 1) #normal sales price seems slightly skewed to the right
str(train$SalePrice)
#log transformation of sales price
logsalesprice <- log(train$SalePrice)
ggplot(data.frame(logsalesprice), aes(x = logsalesprice)) +
geom_density(size = 1) #log transformation appears more normal
##Center and scale data
preProcValues <- preProcess(df, method = c("center","scale"))
df.proc <- predict(preProcValues, df)
##Make factor data dummy and split into train/test
dummies <- dummyVars(~.,data = df)
df <- predict(dummies, newdata = df)
df <- data.frame(df)
train <- df[1:nrow(train),]
test <- df[(nrow(train)+1):nrow(df),]
##Find variables in train data where there is variability. If var = 0 they are only present in the test data
hasvar <- names(data.frame(train[,apply(train, 2, var, na.rm=TRUE) != 0]))
train <- train[hasvar]
test <- test[hasvar]
##Iimpution and data manipulation is complete. We are not ready to model with the resulting train and test datasets
rm(actual,imputed,melted,to_plot,imp.df,imp.vars,NA.Values,none,dummies,novar)
train <- read.csv("train.csv")
ggplot(data.frame(train), aes(x = log(salesprice))) +
geom_density(size = 1) +
theme_minimal()
rm(list = ls())
load("imputed.RData")
imp.vars <- aggr(df, plot = FALSE)
imp.vars
load("imputed.RData")
imp.vars
str(imp.df)
imputed <- data.frame(imp.df$imp[imp.vars[2,1]])
imputed
names(imputed) <- imp.vars[2,1]
imputed
imputed <- imputed %>% group_by(MasVnrType) %>% summarise(Imputed = n()/nrow(imputed))
to_plot <- actual %>% inner_join(imputed)
melted<- melt(to_plot, id=imp.vars[2,1])
ggplot(melted,aes(x=MasVnrType,y=value,fill=variable)) +
geom_bar(stat="identity", position="dodge") +
ylab("Proportion")
load("imputed.RData")
mputed <- data.frame(imp.df$imp[imp.vars[2,1]])
names(imputed) <- imp.vars[2,1]
imputed <- imputed %>% group_by(MasVnrType) %>% summarise(Imputed = n()/nrow(imputed))
to_plot <- actual %>% inner_join(imputed)
melted<- melt(to_plot, id=imp.vars[2,1])
ggplot(melted,aes(x=MasVnrType,y=value,fill=variable)) +
geom_bar(stat="identity", position="dodge") +
ylab("Proportion")
load("imputed.RData")
ggplot(data.frame(train), aes(x = salesprice)) +
geom_density(size = 1) +
theme_minimal()
train
ggplot(data.frame(train), aes(x = SalePrice)) +
geom_density(size = 1) +
theme_minimal()
ggplot(data.frame(train), aes(x = SalePrice)) +
geom_density(size = 1) +
theme_minimal()
ggplot(df, aes(x = LotArea,)) +
geom_density(size = 1) +
ggtitle("Distribution of log(LotArea)")
install.packages("gridExtra")
library(gridExtra)
plot1 <- ggplot(data.frame(train), aes(x = SalePrice)) +
geom_density(size = 1) +
theme_minimal()
plot2 <- ggplot(df, aes(x = LotArea,)) +
geom_density(size = 1) +
ggtitle("Distribution of log(LotArea)") +
theme_minimal()
grid.arrange(plot1, plot2, ncol=2)
?grid.arrage
?grid.arrange
load(file = "preproc.RData")
set.seed(110888)
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
lambdas <- seq(1,0,-0.001)
##Ridge Regression
ridge.fit <- train(x=train,
y=logsalesprice,
method="glmnet",
metric="RMSE",
trControl=fitControl,
tuneGrid=expand.grid(alpha=0, # Lasso regression
lambda=lambdas))
mean(ridge.fit$resample$RMSE)
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores")
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate(mean(lasso.fit$resample$RMSE),x=.2,y=.14) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate(mean(ridge.fit$resample$RMSE),x=.2,y=.14) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("mean(ridge.fit$resample$RMSE)",x=.2,y=.14) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate(label = mean(ridge.fit$resample$RMSE),x=.2,y=.14) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = "Some text")
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = mean(ridge.fit$resample$RMSE))
?round
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = round(mean(ridge.fit$resample$RMSE),3) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = round(mean(ridge.fit$resample$RMSE),3) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = round(mean(ridge.fit$resample$RMSE),3)
)
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = round(mean(ridge.fit$resample$RMSE),3)
round(mean(ridge.fit$resample$RMSE),3)
round(mean(ridge.fit$resample$RMSE),3)
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = round(mean(ridge.fit$resample$RMSE),3))
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = "Best RMSE =" round(mean(ridge.fit$resample$RMSE),3)) +
theme_minimal()
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = "Best RMSE =" round(mean(ridge.fit$resample$RMSE),3)) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = "Best RMSE =" round(mean(ridge.fit$resample$RMSE),3))
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = paste0("Best RMSE =", round(mean(ridge.fit$resample$RMSE),3))
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = paste0("Best RMSE =", round(mean(ridge.fit$resample$RMSE),3))
)
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = paste0("Best RMSE =", round(mean(ridge.fit$resample$RMSE),3)))
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, label = paste0("Best RMSE =", round(mean(ridge.fit$resample$RMSE),3))) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, col = "red", size = 3, label = paste0("Best RMSE =", round(mean(ridge.fit$resample$RMSE),3))) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, col = "red", size = 10, label = paste0("Best RMSE =", round(mean(ridge.fit$resample$RMSE),3))) +
theme_minimal()
ggplot(data=filter(ridge.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, col = "red", size = 8, label = paste0("Best RMSE =", round(mean(ridge.fit$resample$RMSE),3))) +
theme_minimal()
#Lasso Regression
lasso.fit <- train(x=train,
y=logsalesprice,
method="glmnet",
metric="RMSE",
trControl=fitControl,
tuneGrid=expand.grid(alpha=1, # Lasso regression
lambda=lambdas))
ggplot(data=filter(lasso.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .2, y = .14, col = "red", size = 8, label = paste0("Best RMSE =", round(mean(ridge.fit$resample$RMSE),3))) +
theme_minimal()
ggplot(data=filter(lasso.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .05, y = .14, col = "red", size = 8, label = paste0("Best RMSE =", round(mean(lasso.fit$resample$RMSE),3))) +
theme_minimal()
ggplot(data=filter(lasso.fit$result, RMSE < 0.25)) +
geom_line(aes(x=lambda,y=RMSE)) +
ggtitle("LASSO Scores") +
annotate("text", x = .07, y = .14, col = "red", size = 8, label = paste0("Best RMSE =", round(mean(lasso.fit$resample$RMSE),3))) +
theme_minimal()
coef <- data.frame(coef.name = dimnames(coef(lasso.fit$finalModel,s=lasso.fit$bestTune$lambda))[[1]],
coef.value = matrix(coef(lasso.fit$finalModel,s=lasso.fit$bestTune$lambda)))
# exclude the (Intercept) term
coef <- coef[-1,]
# print summary of model results
picked_features <- nrow(filter(coef,coef.value!=0))
not_picked_features <- nrow(filter(coef,coef.value==0))
cat("Lasso picked",picked_features,"variables and eliminated the other",
not_picked_features,"variables\n")
install.packages("pls")
library(pls)
pls.fit <- train(x=train,
y=logsalesprice,
method="pls",
metric="RMSE",
trControl=fitControl,
validation = "none",
tuneGrid=expand.grid(ncomp = seq(1,551,1)))
min(pls.fit$results$RMSE)
pcr.fit <- train(x=train,
y=logsalesprice,
method="pcr",
metric="RMSE",
trControl=fitControl,
validation = "none",
tuneGrid=expand.grid(ncomp = seq(1,551,1)))
min(pls.fit$results$RMSE)
pls.fit <- train(x=train,
y=logsalesprice,
method="pls",
metric="RMSE",
trControl=fitControl,
validation = "none",
tuneGrid=expand.grid(ncomp = seq(1,551,1)))
pls.fit <- train(x=train,
y=logsalesprice,
method="pls",
metric="RMSE",
trControl=fitControl,
validation = "none")
min(pls.fit$results$RMSE)
pls.fit <- train(x=train,
y=logsalesprice,
method="pls",
metric="RMSE",
trControl=fitControl,
validation = "none" ,
tuneGrid=expand.grid(ncomp = seq(1,ncol(train),1)))
min(pls.fit$results$RMSE)
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 200) +
ylim(min = 0, max = .2) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
pls.results <- pls.fit$results[1:3]
geom_line(size = 1) +
xlim(min = 0 , max = 200) +
ylim(min = 0, max = .2) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
pcr.fit <- train(x=train,
y=logsalesprice,
method="pcr",
metric="RMSE",
trControl=fitControl,
validation = "none",
tuneGrid=expand.grid(ncomp = seq(1,ncol(train),1)))
min(pcr.fit$results$RMSE)
pls.results <- pls.fit$results[1:3]
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 200) +
ylim(min = 0, max = .2) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
pcr.results.tidy <- gather(pcr.results, Measure, Value, - ncomp)
ggplot(pcr.results.tidy,aes(x = ncomp, y = Value, col = Measure)) +
geom_line(size = 1) +
xlim(min = 0 , max = 200) +
ylim(min = 0, max = 1) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
geom_text(mapping=aes(x=109, y=.5, label="ncomp = 107"),col = "black", size=4, vjust=-0.4, hjust=0) +
geom_text(mapping=aes(x=109, y=.135, label="RMSE = .131488"),col = "black", size=4, vjust=-0.4, hjust=0) +
geom_text(mapping=aes(x=109, y=.9, label="R^2 = .891103"),col = "black", size=4, vjust=-0.4, hjust=0) +
labs(title = "Performance by Number of Components", x = "Number of Components")+
theme_minimal()
install.packages("tidyr")
library(tidyr)
pcr.results.tidy <- gather(pcr.results, Measure, Value, - ncomp)
pcr.results <- pcr.fit$results[1:3]
pcr.results.tidy <- gather(pcr.results, Measure, Value, - ncomp)
ggplot(pcr.results.tidy,aes(x = ncomp, y = Value, col = Measure)) +
geom_line(size = 1) +
xlim(min = 0 , max = 200) +
ylim(min = 0, max = 1) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
geom_text(mapping=aes(x=109, y=.5, label="ncomp = 107"),col = "black", size=4, vjust=-0.4, hjust=0) +
geom_text(mapping=aes(x=109, y=.135, label="RMSE = .131488"),col = "black", size=4, vjust=-0.4, hjust=0) +
geom_text(mapping=aes(x=109, y=.9, label="R^2 = .891103"),col = "black", size=4, vjust=-0.4, hjust=0) +
labs(title = "Performance by Number of Components", x = "Number of Components")+
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 200) +
ylim(min = 0, max = .2) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 200) +
ylim(min = 0, max = .2) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 300) +
ylim(min = 0, max = .2) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
ylim(min = 0, max = .2) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .2) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = 1) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
theme_minimal()
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
ggtitle("PLS RMSE Based on Number of Components")
theme_minimal()
min(pcr.fit$results$RMSE)
ggplot(pls.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
ggtitle("PLS RMSE Based on Number of Components") +
annotate("text", x = 100, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pls.fit$results$RMSE),3))) +
theme_minimal()
min(pls.fit$results$RMSE)
ggplot(pcr.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
annotate("text", x = 100, y = ..25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pcr.fit$results$RMSE),3))) +
theme_minimal()
ggplot(pcr.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
annotate("text", x = 100, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pcr.fit$results$RMSE),3))) +
theme_minimal()
min(pls.fit$results$RMSE)
min(pcr.fit$results$RMSE)
ggplot(pcr.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
annotate("text", x = 100, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pcr.fit$results$RMSE),4))) +
theme_minimal()
ggplot(pcr.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
annotate("text", x = 90, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pcr.fit$results$RMSE),4))) +
theme_minimal()
save.image(file = "RegressionsFinal.RData")
library(Boruta)
ggplot(pcr.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
ggtitle("PCR RMSE Based on Number of Components")
annotate("text", x = 90, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pcr.fit$results$RMSE),4))) +
theme_minimal()
ggplot(pcr.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
ggtitle("PCR RMSE Based on Number of Components")
annotate("text", x = 90, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pcr.fit$results$RMSE),4))) +
theme_minimal()
ggplot(pcr.results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
ggtitle("PCR RMSE Based on Number of Components") +
annotate("text", x = 90, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pcr.fit$results$RMSE),4))) +
theme_minimal()
pls.results
pls.fit$results
ggplot(pls.fit$results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pls.fit$bestTune$ncomp, linetype = "dotted", size=1) +
ggtitle("PLS RMSE Based on Number of Components") +
annotate("text", x = 100, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pls.fit$results$RMSE),4))) +
theme_minimal()
ggplot(pcr.fit$results,aes(x = ncomp, y = RMSE)) +
geom_line(size = 1) +
xlim(min = 0 , max = 400) +
ylim(min = 0, max = .5) +
geom_vline(xintercept =  pcr.fit$bestTune$ncomp, linetype = "dotted", size=1) +
ggtitle("PCR RMSE Based on Number of Components") +
annotate("text", x = 90, y = .25, col = "red", size = 8, label = paste0("Best RMSE =", round(min(pcr.fit$results$RMSE),4))) +
theme_minimal()
