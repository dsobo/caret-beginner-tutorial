---
title: "Crypto Dashboard"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(tidyverse)
library(httr)
library(RCurl)
library(digest)
library(highcharter)
library(RColorBrewer)

options(scipen=999)

##GDAX API setup
gdax_url <- "https://api.gdax.com"
gdax_reqPath <- "/accounts"
gdax_fullPath <- paste(gdax_url, gdax_reqPath,sep = "/")
timestamp <- format(as.numeric(Sys.time()), digits=13)

gdax_key <- "a8934e7fd6b75cc21a91bd00e6bae243"
gdax_phrase <- "b829do3p9lk"
gdax_secret <- "ere1bD1ywlVe+KV5qLloYun+c3mbQ4k6noH5YOPy1SjT9y/cHWSKLcaZWcUpNhdwzNfZ/Mx+WRMYZyjtQT64YA=="
gdax_decode <- base64Decode(gdax_secret, mode = "raw")
gdax_message <- paste0(timestamp,"GET", gdax_reqPath)
gdax_sig <- base64Encode(hmac(key = gdax_decode, object = gdax_message, algo = "sha256", raw = T))

gdax_acct <- content(GET(gdax_fullPath,
                add_headers(
                  "CB-ACCESS-KEY" = gdax_key, 
                  "CB-ACCESS-SIGN" = gdax_sig,
                  "CB-ACCESS-TIMESTAMP" = timestamp,
                  "CB-ACCESS-PASSPHRASE" = gdax_phrase,
                  "Content-Type"="application/json")))


##Binance API setup
binance_url <- "https://api.binance.com"
binance_reqPath <- "/api/v3/account"
binance_fullPath <- paste(binance_url, binance_reqPath, sep="/")
timestamp <- format(as.numeric(Sys.time()), digits=10)

binance_key <- "PTRrikx88hl1YJg3xr6KdvORL7fT4OfcvGqv2NaiOIalkf34WYf0ixOu7TqqljiA"
binance_secret <- "fkhb4iyWVYV0D9TKHmOf5sK5TDxFTxO4bQ5TD2nH4ihOfJdH9rdRQrbpnLhfmTWH"
binance_recvWindow <- "50000000000000"
binance_message <- paste0("timestamp=", timestamp,"&recvWindow=", binance_recvWindow)
binance_sig <- hmac(key = binance_secret, object = binance_message, algo = "sha256", raw = F)

binance_acct <- content(GET(binance_fullPath,
                  add_headers("X-MBX-APIKEY" = binance_key),
                  query = list(
                    timestamp = timestamp,
                    recvWindow = binance_recvWindow,
                    signature = binance_sig)))

##Extract and combine holdings data
#gdax holdings
holdings <- map_df(gdax_acct, magrittr::extract, c("currency","balance"))
holdings$balance <- as.numeric(holdings$balance)

#Binance holdings
bin_hld <- binance_acct[["balances"]] %>% map_df(magrittr::extract, c("asset","free"))
names(bin_hld) <- c("currency","balance")
bin_hld$balance <- as.numeric(bin_hld$balance)

holdings <- holdings %>%
  bind_rows(bin_hld) %>%
  filter(balance > 0) %>%
  group_by(currency) %>%
  summarise(holdings = sum(balance)) 

holdings_cmk <- content(GET("https://api.coinmarketcap.com/v1/ticker/")) %>%
  map_df(magrittr::extract,c("id","symbol","price_usd","24h_volume_usd","market_cap_usd","percent_change_1h","percent_change_24h","percent_change_7d")) %>%
  inner_join(holdings, by = c("symbol"="currency"))


rm(list=setdiff(ls(), "holdings_cmk"))

holdings_cmk <- cbind(holdings_cmk[1:2],map_df(holdings_cmk[3:9],as.numeric))
holdings_cmk <- rbind(holdings_cmk,c("minimum","min",0,0,0,-max(abs(holdings_cmk$percent_change_1h)),-max(abs(holdings_cmk$percent_change_24h)),-max(abs(holdings_cmk$percent_change_7d)),0))
holdings_cmk <- cbind(holdings_cmk[1:2],map_df(holdings_cmk[3:9],as.numeric))
holdings_cmk <- rbind(holdings_cmk,c("maximum","max",0,0,0,max(abs(holdings_cmk$percent_change_1h)),max(abs(holdings_cmk$percent_change_24h)),max(abs(holdings_cmk$percent_change_7d)),0))
holdings_cmk <- cbind(holdings_cmk[1:2],map_df(holdings_cmk[3:9],as.numeric))
holdings_cmk <- holdings_cmk %>% mutate(usd_total = round(price_usd * holdings,2))

#RColorBrewer Palette For Treemaps
stops <- data.frame(q = 0:10/10,c = brewer.pal(11, "RdYlGn"),stringsAsFactors = FALSE)
stops <- list_parse2(stops)


#Total Investment
btc_inv <- 296.37 + 94.63 + 98.74 + 259.98 + 489.86 + 493.95 + 150.79
eth_inv <- 38.48 + 145.59 + 379.59 + 400 + 400 + 500 + 476.5 +400 + 500 + 400 + 400
ltc_inv <- 353.57 + 500 + 400 + 150 + 331.19

total_inv <- sum(btc_inv,eth_inv,ltc_inv)

```

Row
-----------------------------------------------------------------------

### Total Value

```{r total}
total <- round(sum(holdings_cmk$usd_total),2)

valueBox(paste0("$",total), icon = "fa-money")
```

### Total Change

```{r total_per}
total_change_per <- round(sum(holdings_cmk$usd_total) / total_inv * 100,2)
total_change <- round(sum(holdings_cmk$usd_total) - total_inv,2)

valueBox(paste0("$",total_change," or ",total_change_per,"%"),
        icon = ifelse(total_change_per > 0, "fa-arrow-up","fa-arrow-down"),
         color = ifelse(total_change_per > 0, "success", "danger"))
```

### Weekly % Change

```{r week_change}
week_change_per <- round((sum(holdings_cmk$usd_total)/sum(holdings_cmk$usd_total/(1+(holdings_cmk$percent_change_7d/100))) -1) * 100,2)
week_change <- round(sum(holdings_cmk$usd_total) - sum(holdings_cmk$usd_total/(1+(holdings_cmk$percent_change_7d/100))),2)
  
valueBox(paste0("$",week_change," or ",week_change_per,"%"),
         icon = ifelse(week_change_per > 0, "fa-arrow-up","fa-arrow-down"),
         color = ifelse(week_change_per > 0, "success", "danger"))
```

### 24 Hour % Change

```{r 24hr_change}

day_change_per <- round((sum(holdings_cmk$usd_total)/sum(holdings_cmk$usd_total/(1+(holdings_cmk$percent_change_24h/100))) -1) * 100,2)
day_change <- round(sum(holdings_cmk$usd_total) - sum(holdings_cmk$usd_total/(1+(holdings_cmk$percent_change_24h/100))),2)

valueBox(paste0("$",day_change," or ",day_change_per,"%"),
         icon = ifelse(day_change_per > 0, "fa-arrow-up","fa-arrow-down"),
         color = ifelse(day_change_per > 0, "success", "danger"))

```

Row {.tabset .tabset-fade}
-----------------------------------------------------------------------

### 24 Hours

```{r 24hr_tree}
hchart(holdings_cmk, "treemap", hcaes(x = symbol, value = usd_total, color = percent_change_24h)) %>%
  hc_colorAxis(stops = stops) %>% 
  hc_tooltip(pointFormat = "Total: ${point.usd_total} <br> Perc Change: {point.percent_change_24h}")

```

### 7 Days

```{r 7d_tree}
hchart(holdings_cmk, "treemap", hcaes(x = symbol, value = usd_total, color = percent_change_7d)) %>%
  hc_colorAxis(stops = stops) %>% 
  hc_tooltip(pointFormat = "Total: ${point.usd_total} <br> Perc Change: {point.percent_change_7d}")

```

### 1 Hour

```{r 1hr_tree}
hchart(holdings_cmk, "treemap", hcaes(x = symbol, value = usd_total, color = percent_change_1h)) %>%
  hc_colorAxis(stops = stops) %>% 
  hc_tooltip(pointFormat = "Total: ${point.usd_total} <br> Perc Change: {point.percent_change_1h}")

```
